import Reflux from 'reflux'
import ChartAPI from 'data/requests/ChartAPI'
import api from 'data/api'

const ChartActions = Reflux.createActions({
<<<<<<< HEAD
  'fetchCharts': { children: ['completed', 'failed'], asyncResult: true },
  'fetchChart': { children: ['completed', 'failed'], asyncResult: true },
  'fetchMapFeatures': { children: ['completed', 'failed'], asyncResult: true },
  'setPalette': 'setPalette',
  'setType': 'setType',
  'setTitle': 'setTitle',
  'setDateRange': 'setDateRange',
  'setIndicatorIds': 'setIndicatorIds',
  'setCampaignIds': 'setCampaignIds',
  'setLocationIds': 'setLocationIds'
=======
  'fetchCharts': { children: ['completed', 'failed'] },
  'deleteChart': { children: ['completed', 'failed'] },
  'postChart': { children: ['completed', 'failed'] }
>>>>>>> development
})

// API CALLS
// ---------------------------------------------------------------------------
<<<<<<< HEAD
ChartActions.fetchCharts.listenAndPromise(() => {
  return ChartAPI.getCharts()
})

ChartActions.fetchChart.listen(chart_id => {
  ChartActions.fetchChart.promise(ChartAPI.getChart(chart_id))
})

ChartActions.fetchMapFeatures.listen(location_ids => {
  ChartActions.fetchMapFeatures.promise(
    api.geo({parent_location_id__in: location_ids}, null, {'cache-control': 'max-age=604800, public'})
  )
})
=======
ChartActions.fetchCharts.listenAndPromise(() => api.get_chart(null, null, {'cache-control': 'no-cache'}))
ChartActions.deleteChart.listenAndPromise(ChartAPI.deleteChart)
ChartActions.postChart.listen(chart_def => ChartActions.postChart.promise(api.post_chart(chart_def)))
>>>>>>> development

export default ChartActions
